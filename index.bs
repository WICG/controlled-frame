<pre class="metadata">
Title: Controlled Frame API
Abstract: This document defines an API for embedding arbitrary web content only
    within the context of an Isolated Web Application (IWA). The embedded
    content is a new top-level browsing context within and controlled by the
    embedder.
Repository: WICG/controlled-frame
URL: https://wicg.github.io/controlled-frame/
Status: w3c/CG-DRAFT
Shortname: controlled-frame
Level: 1
Editor: Chase Phillips 115880, Google LLC https://google.com, cmp@google.com
Editor: Robbie McElrath 139758, Google LLC https://google.com, rmcelrath@chromium.org

Group: WICG
Markup Shorthands: markdown yes
</pre>

<style>
.domintro::before {
    content: 'For web developers (non-normative)';
    text-transform: initial;
}
.domintro dt {
    font-family: Menlo, Consolas, "DejaVu Sans Mono", Monaco, monospace;

    padding-top: 0.5em;
    padding-bottom: 1em;
}
.domintro dt a {
    color: inherit; border-bottom-style: none;
}
.domintro dt code {
    font-size: inherit;
}

/* Put nice boxes around each algorithm. */
[data-algorithm]:not(.heading) {
  padding: .5em;
  border: thin solid #ddd; border-radius: .5em;
  margin: .5em calc(-0.5em - 1px);
}
[data-algorithm]:not(.heading) > :first-child {
  margin-top: 0;
}
[data-algorithm]:not(.heading) > :last-child {
  margin-bottom: 0;
}
[data-algorithm] [data-algorithm] {
  margin: 1em 0;
}

/* .XXX from https://resources.whatwg.org/standard.css */
.XXX {
  color: #D50606;
  background: white;
  border: solid #D50606;
}
</style>

<pre class="biblio">
{
  "isolated-web-apps": {
    "authors": [
      "Reilly Grant"
    ],
    "href": "https://github.com/WICG/isolated-web-apps/blob/main/README.md",
    "title": "Isolated Web Apps Explainer"
  },
  "high-watermark-permissions": {
    "authors": [
        "Robbie McElrath"
    ],
    "href": "https://github.com/WICG/isolated-web-apps/blob/main/Permissions.md",
    "title": "Isolated Web Apps High Watermark Permissions Explainer"
  }
}
</pre>

<pre class="anchors">
spec: html; urlPrefix: https://html.spec.whatwg.org/multipage/
    type: dfn
        urlPrefix: document-sequences.html
            text: navigable; for: /; url: navigable
            text: initialize the navigable; url: initialize-the-navigable
        urlPrefix: dom.html
            text: contexts in which this element can be used; url: concept-element-contexts
            text: content model; url: concept-element-content-model
            text: nothing; url: concept-content-nothing
            text: content attributes; url: concept-element-attributes
            text: global attributes; url: global-attributes
            text: dom interface; url: concept-element-dom
            text: represents; url: represents
            text: accessibility considerations; url: concept-element-accessibility-considerations
        urlPrefix: embedded-content.html
            text: src; url: attr-source-src
        urlPrefix: embedded-content-other.html
            text: width; url: attr-dim-width
            text: height; url: attr-dim-height
        urlPrefix: nav-history-apis.html
            text: navigable; for: window; url: window-navigable

spec: fetch; urlPrefix: https://fetch.spec.whatwg.org/
    type: dfn
        urlPrefix: /
            text: main fetch; url: main-fetch
spec: infra; urlPrefix: https://infra.spec.whatwg.org
    type: dfn
        text: empty; for: map; url: map-is-empty
spec: webidl; urlPrefix: https://webidl.spec.whatwg.org
    type: dfn
        text: Web IDL Standard; url: introduction
        text: async iterator; url: idl-async-iterable
        text: promise; url: idl-promise
        text: promise rejected; url: a-promise-rejected-with
        text: promise resolved; url: a-promise-resolved-with
</pre>

<pre class=link-defaults>
spec:fetch; type:dfn; for:/; text:header list
spec:fetch; type:dfn; for:/; text:request
spec:fetch; type:dfn; for:/; text:response
spec:html; type:dfn; for:/; text:top-level traversable
spec:infra; type:dfn; for:/; text:set
spec:infra; type:dfn; text:list
spec:webidl; type:dfn; text:attribute
</pre>

<pre class=link-defaults>
spec:fetch; type:dfn; for:/; text:request
spec:infra; type:dfn; text:list
spec:infra; type:dfn; for:/; text:set
spec:webidl; type:dfn; text:attribute
</pre>

<!-- ====================================================================== -->
# Introduction # {#introduction}
<!-- ====================================================================== -->

This specification describes a content embedding API that satisfies some
critical use cases for IWAs that <{iframe}> does not support. This embedding
environment should allow embedding all content without express permission from
the embedded site, including content which <{iframe}> cannot embed, and provide
embedding sites more control over that embedded content.

Since this is a particularly powerful API, its use and availability makes an app
a target of various types of hacking. As a result, this API is limited to use in
[[Isolated-Web-Apps|Isolated Web Applications]] (IWAs) which have addtional
safeguards in place to protect users and developers.  IWAs are not a normal web
application and can exist only at a special 'isolated-app:' scheme. This means
by design that this API will not be available to normal web pages.

Note: This API is not intended to be a replacement or substitute for <{iframe}>.
All <{iframe}> use cases are still valid and should continue to use <{iframe}>,
including IWAs where possible.

<!-- ====================================================================== -->
<h2 id=based-on-fencedframe-spec>The Fenced Frame specification</h2>
<!-- ====================================================================== -->

For convenience, the Controlled Frame specification assumes that the Fenced
Frame specification is in place. There are concepts introduced in the Fenced
Frame specification, such as nested top-level traversibles, that are broadly
useful to refer to in the context of Controlled Frame.

The Fenced Frame specification achieves defining these concepts via monkey
patching some specifications, such as HTML. We will also require monkey
patching specifications for some parts of this Controlled Frame specification.

<!-- ====================================================================== -->
<h2 id=the-controlledframe-element>The <dfn element export>controlledframe</dfn> element</h2>
<!-- ====================================================================== -->

<dl class="element">
 <dt>[=Contexts in which this element can be used=]:</dt>
 <dd>Where [=embedded content=] is expected.</dd>
 <dt>[=Content model=]:</dt>
 <dd>[=Nothing=].</dd>
 <dt>[=Content attributes=]:</dt>
 <dd>[=Global attributes=]</dd>
 <dd><code>[=src=]</code> — Content source URL to embed</dd>
 <dd><code>partition</code> — Partition name to hold data related to this content</dd>
 <dt>Properties</dt>
 <dd><code>contentWindow</code> — Embedded content window DOM accessor</dd>
 <dd><code>contextMenus</code> — Context menus accessor</dd>
 <dd><code>request</code> — WebRequest accessor</dd>
 <dt>[=Accessibility considerations=]:</dt>
 <dd><p class=XXX>Screen readers should be able to traverse into
 the embedded content similar to how a reader can traverse into iframes and
 other related embedded content.</p></dd>
 <dt>[=DOM interface=]:</dt>
 <dd>
<xmp class=idl>
[Exposed=Window, IsolatedContext]
interface HTMLControlledFrameElement : HTMLElement {
    [HTMLConstructor] constructor();

    [CEReactions] attribute USVString src;
    attribute DOMString partition;

    readonly attribute WindowProxy? contentWindow;
    readonly attribute ContextMenus contextMenus;
    readonly attribute WebRequest request;

    // Navigation methods.
    Promise<undefined> back();
    boolean canGoBack();
    boolean canGoForward();
    Promise<undefined> forward();
    Promise<undefined> go(long relativeIndex);
    undefined reload();
    undefined stop();

    // Scripting methods.
    Promise<undefined> addContentScripts(sequence<ContentScriptDetails> contentScriptList);
    Promise<any> executeScript(optional InjectDetails details = {});
    Promise<undefined> insertCSS(optional InjectDetails details = {});
    Promise<undefined> removeContentScripts(sequence<DOMString>? scriptNameList);

    // Configuration methods.
    Promise<undefined> clearData(
      optional ClearDataOptions options = {},
      optional ClearDataTypeSet types = {});
    Promise<boolean> getAudioState();
    Promise<long> getZoom();
    Promise<boolean> isAudioMuted();
    undefined setAudioMuted(boolean mute);
    Promise<undefined> setZoom(long zoomFactor);

    // Capture methods.
    Promise<undefined> captureVisibleRegion(optional ImageDetails options = {});
    undefined print();
};
</xmp>
</dd>
</dl>

The <{controlledframe}> element [=represents=] its [=fenced navigable container/fenced navigable=].

The Controlled Frame element is exposed to any {{Document}} with the
"controlled-frame" [=policy-controlled feature=] whose
[=environment settings object=] is an [=isolated context=].

The partition attribute takes an identifier specifying where data related to the
Controlled Frame element's instance should be stored. The identifier is composed
of a string of alphanumeric digits. All data for the embedded [=/navigable=]
will be stored in this partition.

By default, all data stored will be held in a in-memory storage partition so
that when the Controlled Frame element is destroyed the data is also destroyed.
While the data is held in this partition, no data will persist from that
Controlled Frame embedded [=/navigable=].

If the partition attribute identifier contains the prefix "persist:", the user
agent will use a disk-based storage environment rather than an in-memory
storage partition.

If multiple Controlled Frames share the same partition identifier, all of their
embedded [=/navigable=] instances will share the same storage partition.

<div algorithm>
  To <dfn>validate embedded content</dfn> with an embedded [=/navigable=]
  |embeddedContent|, run the following steps:

  1. If |embeddedContent| does not have an [=navigable/embedderParent=], return
     false.
  1. If |embeddedContent|'s [=navigable/embedderParent=] is not valid, return
     false.
  1. If |embeddedContent|'s [=navigable/embedderParent=] is not the current
     [=/navigable=], return false.
  1. Return true.

</div>

<!-- ====================================================================== -->
## Navigation methods ## {#api-nav}
<!-- ====================================================================== -->

<div class="domintro note">

  : {{HTMLControlledFrameElement/back()|back}}()

  :: Goes back one step in the overall
    <a href="https://html.spec.whatwg.org/multipage/document-sequences.html#tn-session-history-entries">
    session history entries </a> list for the
    <a href="https://html.spec.whatwg.org/multipage/document-sequences.html#traversable-navigable">
    traversable navigable</a> in the Controlled Frame.

    If there is no previous page, does nothing.

  : {{HTMLControlledFrameElement/canGoBack()|canGoBack}}()

  :: Returns true if the current
     <a href="https://html.spec.whatwg.org/multipage/document-sequences.html#nav-current-history-entry">
     current session history entry</a> is not the first one in the navigation
     history entry list. This means that there is a previous
     <a href="https://html.spec.whatwg.org/multipage/browsing-the-web.html#session-history-entry">
     session history entry</a> for this
     <a href="https://html.spec.whatwg.org/multipage/document-sequences.html#navigable">
     navigable</a>.

  : {{HTMLControlledFrameElement/forward()|forward}}()

  :: Goes forward one step in the overall
    <a href="https://html.spec.whatwg.org/multipage/document-sequences.html#tn-session-history-entries">
    session history entries </a> list for the
    <a href="https://html.spec.whatwg.org/multipage/document-sequences.html#traversable-navigable">
    traversable navigable</a> in the Controlled Frame.

    If there is no next page, does nothing.

  : {{HTMLControlledFrameElement/go()|go}}()

  :: Reloads the current page.

  : {{HTMLControlledFrameElement/go()|go}}(<var>relativeIndex</var>)

  :: Goes back or forward <var>relativeIndex</var> number of steps in the overall
    <a href="https://html.spec.whatwg.org/multipage/document-sequences.html#tn-session-history-entries">
    session history entries </a> list for the current
    <a href="https://html.spec.whatwg.org/multipage/document-sequences.html#traversable-navigable">
    traversable navigable</a>.

    A zero relative index will reload the current page.

    If the relative index is out of range, does nothing.

  : {{HTMLControlledFrameElement/reload()|reload}}()

  :: Reloads the current page.

  : {{HTMLControlledFrameElement/stop()|stop}}()

  :: Cancels the document load.

</div>

<div algorithm>
  To <dfn>navigate embedded content to state</dfn>, given an {{/object}}
  |state|, run the following steps:

  1. If |state| is not an integer, return false.
  1. Attempt to navigate the embedded content by |state| history items. If
     an error is encountered, return false.
  1. Return true.

</div>

<div algorithm>
  The <dfn method for=HTMLControlledFrameElement>back()</dfn> method steps for
  an |embeddedContent| are:

  1. Let |resultPromise| be a new [=promise=].
  1. If the result of running [=validate embedded content=] with an embedded
     [=/navigable=] |embeddedContent| is false, [=reject=] |resultPromise| with
      a {{TypeError}} and abort these steps.
  1. If the result of running [=navigate embedded content to state=] with
     "-1" is false, [=reject=] |resultPromise| with
     a {{TypeError}} and abort these steps.
  1. Then, [=resolve=] |resultPromise|.

</div>

<div algorithm>
  The <dfn method for=HTMLControlledFrameElement>canGoBack()</dfn>
  method steps for an |embeddedContent| are:

  1. If the result of running [=validate embedded content=] with an embedded
     [=/navigable=] |embeddedContent| is false, return false.
  1. If embedded content is already at its first history state, return false.
  1. Return true.

</div>

<div algorithm>
  The <dfn method for=HTMLControlledFrameElement>canGoForward()</dfn>
  method steps for an |embeddedContent| are:

  1. If the result of running [=validate embedded content=] with an embedded
     [=/navigable=] |embeddedContent| is false, return false.
  1. If embedded content is already at its last history state, return false.
  1. Return true.

</div>

<div algorithm>
  The <dfn method for=HTMLControlledFrameElement>forward()</dfn>
  method steps for an |embeddedContent| are:

  1. Let |resultPromise| be a new [=promise=].
  1. If the result of running [=validate embedded content=] with an embedded
     [=/navigable=] |embeddedContent| is false, [=reject=] |resultPromise| with
      a {{TypeError}} and abort these steps.
  1. If the result of running [=navigate embedded content to state=] with
     "1" is false, [=reject=] |resultPromise| with
     a {{TypeError}} and abort these steps.
  1. Then, [=resolve=] |resultPromise|.

</div>

<div algorithm>
  The <dfn method for=HTMLControlledFrameElement>go(|relativeIndex|)</dfn>
  method steps for an |embeddedContent| are:

  1. Let |resultPromise| be a new [=promise=].
  1. If the result of running [=validate embedded content=] with an embedded
     [=/navigable=] |embeddedContent| is false, [=reject=] |resultPromise| with
      a {{TypeError}} and abort these steps.
  1. If the result of running [=navigate embedded content to state=] with
     |relativeIndex| is false, [=reject=] |resultPromise| with
     a {{TypeError}} and abort these steps.
  1. Then, [=resolve=] |resultPromise|.

</div>

<div algorithm>
  The <dfn method for=HTMLControlledFrameElement>reload()</dfn>
  method steps for an |embeddedContent| are:

  1. If the result of running [=validate embedded content=] with an embedded
     [=/navigable=] |embeddedContent| is false, return false.
  1. Reload embedded content for its top-level page.
  1. Return true.

</div>

<div algorithm>
  The <dfn method for=HTMLControlledFrameElement>stop()</dfn>
  method steps for an |embeddedContent| are:

  1. If the result of running [=validate embedded content=] with an embedded
     [=/navigable=] |embeddedContent| is false, return false.
  1. If embedded content is not currently loading a navigation, abort these
     steps.
  1. Stop the current navigation in embedded content.
  1. Return true.

</div>

<!-- ====================================================================== -->
## Scripting methods ## {#api-scripting}
<!-- ====================================================================== -->

<xmp class="idl">
// One of |code| or |file| must be specified but not both.
dictionary InjectDetails {
  DOMString code;
  DOMString file;
};

dictionary InjectionItems {
  DOMString code;
  sequence<DOMString> files;
};

enum RunAt {
  "document_start",
  "document_end",
  "document_idle",
};

dictionary ContentScriptDetails {
  boolean all_frames;
  InjectionItems css;
  sequence<DOMString> exclude_globs;
  sequence<DOMString> exclude_matches;
  sequence<DOMString> include_globs;
  InjectionItems js;
  boolean match_about_blank;
  required sequence<DOMString> matches;
  required DOMString name;
  RunAt run_at;
};
</xmp>

<div algorithm>
  To <dfn>fetch an injection item</dfn>, given an {{/object}}
  |injectionItem| and a |type|, run the following steps:

  1. If |type| is neither "css" or "js", return false.
  1. If |injectionItem| is not a [=dictionary=], return false.
  1. If |injectionItem| is [=map/empty=], return false.
  1. If |injectionItem| has both fields "code" and "file" or neither field:
      1. Return false.
  1. If |injectionItem| has field "code":
      1. Let |injectionCode| be |injectionItem|["code"].
  1. If |injectionItem| has field "file":
      1. Fetch the content from URL |injectionItem|["file"] and store it as
         |injectionCode|. If an error is encountered, return false.
  1. If |type| is "css":
      1. Update the CSS loader for this navigable on this source URL to
         associate |injectionCode| with each load.
  1. If |type| is "js":
      1. Update the JS loader for this navigable on this source URL to
         associate |injectionCode| with each load.
  1. Return true.

</div>

<div algorithm>
  The <dfn method for=HTMLControlledFrameElement>addContentScripts(|contentScriptList|)</dfn>
  method steps are:

  1. Let |resultPromise| be a new [=promise=].
  1. If the result of running [=validate embedded content=] is false,
     [=reject=] |resultPromise| with
      a {{TypeError}} and abort these steps.
  1. [=map/iterate|For each=] |contentScriptDetail| in |contentScriptList|:
      1. If |contentScriptDetail| has field "css":
          1. [=map/iterate|For each=] |cssInjectionItem| in
             |contentScriptDetail|["css"]:
              1. If the result of running [=fetch an injection item=] with
                 |cssInjectionItem| and |type| "css" is false, [=reject=]
                 |resultPromise| with a {{TypeError}} and abort these steps.
      1. If |contentScriptDetail| has field "js":
          1. [=map/iterate|For each=] |jsInjectionItem| in
             |contentScriptDetail|["js"]:
              1. If the result of running [=fetch an injection item=] with
                 |jsInjectionItem| and |type| "js" is false, [=reject=]
                 |resultPromise| with a {{TypeError}} and abort these steps.
  1. Otherwise, [=resolve=] |resultPromise|.

</div>

<div algorithm>
  The <dfn method for=HTMLControlledFrameElement>executeScript(optional |details|)</dfn>
  method steps are:

  1. Let |resultPromise| be a new [=promise=].
  1. If the result of running [=validate embedded content=] is false,
     [=reject=] |resultPromise| with
      a {{TypeError}} and abort these steps.
  1. If |details| has field "code":
      1. Let |detailsCode| be |details|["code"].
  1. If |details| has field "file":
      1. Let |detailsFile| be |details|["file"].
  1. If both |detailsCode| and |detailsFile| are set,
     [=reject=] |resultPromise| with
      a {{TypeError}} and abort these steps.
  1. If |detailsFile| is set:
      1. Fetch file located at |detailsFile|.
      1. If file is not fetched successfully,
         [=reject=] |resultPromise| with
          a {{TypeError}} and abort these steps.
      1. Store the result of fetching file in |detailsCode|.
  1. In the embedded content, execute the script |detailsCode|.
  1. Then, [=resolve=] |resultPromise|.

</div>

<div algorithm>
  The <dfn method for=HTMLControlledFrameElement>insertCSS(optional |details|)</dfn>
  method steps are:

  1. Let |resultPromise| be a new [=promise=].
  1. If the result of running [=validate embedded content=] is false,
     [=reject=] |resultPromise| with
      a {{TypeError}} and abort these steps.
  1. If |details| has field "code":
      1. Let |detailsCode| be |details|["code"].
  1. If |details| has field "file":
      1. Let |detailsFile| be |details|["file"].
  1. If both |detailsCode| and |detailsFile| are set,
     [=reject=] |resultPromise| with
      a {{TypeError}} and abort these steps.
      an error.
  1. If |detailsFile| is set:
      1. Fetch file located at |detailsFile|.
      1. If file is not fetched successfully,
         [=reject=] |resultPromise| with
          a {{TypeError}} and abort these steps.
      1. Store the result of fetching file in |detailsCode|.
  1. In the embedded content, insert the stylesheet content |detailsCode|.
  1. Resolve the promise successfully.
  1. Then, [=resolve=] |resultPromise|.

</div>

<div algorithm>
  The <dfn method for=HTMLControlledFrameElement>removeContentScripts(|scriptNameList|)</dfn>
  method steps are:

  1. Let |resultPromise| be a new [=promise=].
  1. If the result of running [=validate embedded content=] is false,
     [=reject=] |resultPromise| with
      a {{TypeError}} and abort these steps.
  1. For each item of type {{DOMString}} in |scriptNameList| named |scriptName|:
      1. Find the loader for |scriptName|. If it doesn't exist, then skip it.
      1. Attempt to remove the loader associated with |scriptName|.
         If an error is encountered,
         [=reject=] |resultPromise| with
           a {{TypeError}} and abort these steps.
  1. Then, [=resolve=] |resultPromise|.

</div>

<!-- ====================================================================== -->
## Configuration methods ## {#api-config}
<!-- ====================================================================== -->

<xmp class="idl">
dictionary ClearDataOptions {
  long since;
};

dictionary ClearDataTypeSet {
  boolean appcache;
  boolean cache;
  boolean cookies;
  boolean fileSystems;
  boolean indexedDB;
  boolean localStorage;
  boolean persistentCookies;
  boolean sessionCookies;
  boolean webSQL;
};
</xmp>

<div algorithm>
  The <dfn method for=HTMLControlledFrameElement>clearData(optional |options|, optional |types|)</dfn>
  method steps are:

  1. Let |resultPromise| be a new [=promise=].
  1. If the result of running [=validate embedded content=] is false,
     [=reject=] |resultPromise| with
      a {{TypeError}} and abort these steps.
  1. Let |clearSince| be 0. This will represent to clear all items.
  1. If |options|["since"] is set:
      1. Let |clearSince| be |options|["since"].
  1. If |types|["appcache"] is set:
      1. Clear the partition's appcache items with a matching |clearSince|.
  1. If |types|["cache"] is set:
      1. Clear the partition's cache items with a matching |clearSince|.
  1. If |types|["cookies"] is set:
      1. Clear the partition's cookie items with a matching |clearSince|.
  1. If |types|["fileSystems"] is set:
      1. Clear the partition's fileSystem items with a matching |clearSince|.
  1. If |types|["indexedDB"] is set:
      1. Clear the partition's indexedDB items with a matching |clearSince|.
  1. If |types|["localStorage"] is set:
      1. Clear the partition's localStorage items with a matching |clearSince|.
  1. If |types|["persistentCookies"] is set:
      1. Clear the partition's persistentCookies items with a matching |clearSince|.
  1. If |types|["sessionCookies"] is set:
      1. Clear the partition's sessionCookies items with a matching |clearSince|.
  1. If |types|["webSQL"] is set:
      1. Clear the partition's webSQL items with a matching |clearSince|.
  1. Then, [=resolve=] |resultPromise|.

</div>

<div algorithm>
  The <dfn method for=HTMLControlledFrameElement>getAudioState()</dfn>
  method steps are:

  1. Let |resultPromise| be a new [=promise=].
  1. If the result of running [=validate embedded content=] is false,
     [=reject=] |resultPromise| with
      a {{TypeError}} and abort these steps.
  1. Let |muteState| be the current audio mute state of embedded content.
  1. Then, [=resolve=] |resultPromise| with |muteState|.

</div>

<div algorithm>
  The <dfn method for=HTMLControlledFrameElement>getZoom()</dfn>
  method steps are:

  1. Let |resultPromise| be a new [=promise=].
  1. If the result of running [=validate embedded content=] is false,
     [=reject=] |resultPromise| with
      a {{TypeError}} and abort these steps.
  1. Let |zoomFactor| be the current zoom setting for the embedded content.
  1. Then, [=resolve=] |resultPromise| with |zoomFactor|.

</div>

<div algorithm>
  The <dfn method for=HTMLControlledFrameElement>isAudioMuted()</dfn>
  method steps are:

  1. Let |resultPromise| be a new [=promise=].
  1. If the result of running [=validate embedded content=] is false, [=reject=] |resultPromise| with
      a {{TypeError}} and abort these steps.
  1. Let |muteState| be the current audio mute state for embedded content.
  1. Then, [=resolve=] |resultPromise| with |muteState|.

</div>

<div algorithm>
  The <dfn method for=HTMLControlledFrameElement>setAudioMuted(|mute|)</dfn>
  method steps are:

  1. If the result of running [=validate embedded content=] is false,
     return false.
  1. Change the audio mute state for embedded content to match |mute| state.

</div>

<div algorithm>
  The <dfn method for=HTMLControlledFrameElement>setZoom(|zoomFactor|)</dfn>
  method steps are:

  1. Let |resultPromise| be a new [=promise=].
  1. If the result of running [=validate embedded content=] is false,
     [=reject=] |resultPromise| with
      a {{TypeError}} and abort these steps.
  1. Change  the zoom for the embedded content to be |zoomFactor|.
  1. Then, [=resolve=] |resultPromise|.

</div>

<!-- ====================================================================== -->
## Capture methods ## {#api-capture}
<!-- ====================================================================== -->

<xmp class="idl">
// One of |code| or |file| must be specified but not both.
dictionary ImageDetails {
  DOMString format;
  DOMString quality;
};
</xmp>

<div algorithm>
  The <dfn method for=HTMLControlledFrameElement>captureVisibleRegion(optional |options|)</dfn>
  method steps are:

  1. Let |resultPromise| be a new [=promise=].
  1. If the result of running [=validate embedded content=] is false,
     [=reject=] |resultPromise| with
      a {{TypeError}} and abort these steps.
  1. Let |optionsFormat| be "JPEG" by default.
  1. Let |optionsQuality| be 100 by default.
  1. If |options| has field "format":
      1. Let |optionsFormat| be |options|["format"].
  1. If |optionsFormat| is an unrecognized format,
     [=reject=] |resultPromise| with
      a {{TypeError}} and abort these steps.
  1. If |options| has field "quality":
      1. Let |optionsQuality| be |options|["quality"].
  1. If |optionsQuality| is not an integer and is not between 0 and 100
     inclusive,
     [=reject=] |resultPromise| with
      a {{TypeError}} and abort these steps.
  1. Create an image in format `optionsFormat` at quality `optionsQuality`
     showing the visible region of
     embedded content.
  1. Then, [=resolve=] |resultPromise| containing the image data.

</div>

<div algorithm>
  The <dfn method for=HTMLControlledFrameElement>print()</dfn>
  method steps are:

  1. If the result of running [=validate embedded content=] is false,
     abort these steps.
  1. Initiate the browser print page feature for embedded content.

</div>

<!-- ====================================================================== -->
## Event listener API ## {#api-event}
<!-- ====================================================================== -->

<!-- ====================================================================== -->
## Integration with other specifications ## {#api-integration-with-other-specifications}
<!-- ====================================================================== -->

This specification will make some modifications to specifications to accommodate
the needs of Controlled Frame.

<!-- ====================================================================== -->
### Monkey Patch to HTML ### {#api-monkey-patch-to-html}
<!-- ====================================================================== -->

Each [=/navigable=] has:
 * A <dfn for=navigable>frameId</dfn> integer, initially 0.
 * A <dfn for=navigable>next frameId</dfn> integer, initially 1.
 * An <dfn for=navigable>embedderParent</dfn>, a [=/navigable=] or null.

The [=initialize the navigable=] algorithm given a [=/navigable=] |navigable|
and an optional [=/navigable=]-or-null |parent| (default null) is
monkeypatched as follows:

 5. Set |navigable|'s [=navigable/parent=] to |parent|.

 6. <ins>If this [=/navigable=] has been created via a Controlled Frame
    embedder, then set |embedderParent| to the embedder [=/navigable=].
    Otherwise, set |embedderParent| to null.</ins>

 7. <ins>If |parent| is not null (|navigable| is not a
    [=top-level traversable=]), then:</ins>

    1. <ins>Set |navigable|'s [=navigable/frameId=] to |parent|'s
        [=navigable/next frameId=].</ins>

    1. <ins>Increment |parent|'s [=navigable/next frameId=].</ins>

<!-- ====================================================================== -->
# Web Request API # {#api-web-request}
<!-- ====================================================================== -->

<xmp class="idl">
enum ResourceType {
  "main_frame",
  "sub_frame",
  "stylesheet",
  "script",
  "image",
  "font",
  "object",
  "xmlhttprequest",
  "ping",
  "csp_report",
  "media",
  "websocket",
  "webbundle",
  "other",
};

callback interface WebRequestEventListener {
  BlockingResponse? handleEvent(WebRequestEventDetails details);
};

dictionary RequestFilter {
  sequence<ResourceType> types;
  sequence<USVString> urls;
};

enum ExtraInfoSpec {
  "asyncBlocking",
  "blocking",
  "extraHeaders",
  "requestHeaders",
  "responseHeaders",
};

[Exposed=Window, IsolatedContext]
interface WebRequestEvent {
  undefined addListener(WebRequestEventListener listener,
                        optional RequestFilter filter = {},
                        optional sequence<ExtraInfoSpec> extraInfoSpec);
  boolean hasListener(WebRequestEventListener listener);
  boolean hasListeners();
  undefined removeListener(WebRequestEventListener listener);
};

dictionary WebRequestAuthCredentials {
  required DOMString username;
  required DOMString password;
};

dictionary BlockingResponse {
  WebRequestAuthCredentials authCredentials;
  boolean cancel;
  USVString redirectUrl;
  sequence<HttpHeader> requestHeaders;
  sequence<HttpHeader> responseHeaders;
};

enum DocumentLifecycle {
  "prerender",
  "active",
  "cached",
  "pending_deletion",
};

enum FrameType {
  "outermost_frame",
  "fenced_frame",
  "sub_frame",
};

dictionary WebRequestEventDetails {
  DOMString documentId;
  DocumentLifecycle documentLifecycle;
  required long frameId;
  FrameType frameType;
  USVString initiator;
  required DOMString method;
  DOMString parentDocumentId;
  required long parentFrameId;
  required DOMString requestId;
  required long timeStamp;
  required ResourceType type;
  required USVString url;
};

dictionary UploadData {
  ArrayBuffer bytes;
  DOMString file;
};
dictionary RequestBody {
  DOMString error;
  any formData;
  sequence<UploadData> raw;
};

dictionary WebRequestBeforeRequestDetails : WebRequestEventDetails {
  RequestBody requestBody;
};

dictionary HttpHeader {
  required DOMString name;
  DOMString value;
  sequence<byte> binaryValue;
};

dictionary WebRequestBeforeSendHeadersDetails : WebRequestEventDetails {
  sequence<HttpHeader> requestHeaders;
};

dictionary WebRequestSendHeadersDetails : WebRequestEventDetails {
  sequence<HttpHeader> requestHeaders;
};

dictionary WebRequestResponseEventDetails : WebRequestEventDetails {
  required long statusCode;
  required DOMString statusLine;
  sequence<HttpHeader> responseHeaders;
};

dictionary WebRequestHeadersReceivedDetails : WebRequestResponseEventDetails {};

dictionary AuthChallenger {
  DOMString host;
  long port;
};
dictionary WebRequestAuthRequiredDetails : WebRequestResponseEventDetails {
  required AuthChallenger challenger;
  required boolean isProxy;
  required DOMString scheme;
  DOMString realm;
};

dictionary WebRequestResponseWithIpEventDetails : WebRequestResponseEventDetails {
  required boolean fromCache;
  DOMString ip;
};

dictionary WebRequestBeforeRedirectDetails : WebRequestResponseWithIpEventDetails {
  required USVString redirectUrl;
};

dictionary WebRequestResponseStartedDetails : WebRequestResponseWithIpEventDetails {};

dictionary WebRequestCompletedDetails : WebRequestResponseWithIpEventDetails {};

// TODO: is this the right base type?
dictionary WebRequestErrorOccurredDetails : WebRequestEventDetails {
  required DOMString error;
  required boolean fromCache;
  DOMString ip;
};

callback HandlerBehaviorChangedCallback = undefined ();

[Exposed=Window, IsolatedContext]
interface WebRequest {
  readonly attribute WebRequestEvent onBeforeRequest;
  readonly attribute WebRequestEvent onBeforeSendHeaders;
  readonly attribute WebRequestEvent onSendHeaders;
  readonly attribute WebRequestEvent onHeadersReceived;
  readonly attribute WebRequestEvent onAuthRequired;
  readonly attribute WebRequestEvent onBeforeRedirect;
  readonly attribute WebRequestEvent onResponseStarted;
  readonly attribute WebRequestEvent onCompleted;
  readonly attribute WebRequestEvent onErrorOccurred;

  undefined handlerBehaviorChanged(optional HandlerBehaviorChangedCallback callback);
};
</xmp>

Each {{WebRequest}} has a <dfn for=WebRequest>handler map</dfn>, which is a
[=map=] whose [=map/keys=] are [=strings=] and whose [=map/values=] are
[=lists=] of [=WebRequest handler configs=].

Each {{WebRequestEvent}} has:

 * An <dfn for=WebRequestEvent>eventName</dfn>, a [=string=].
 * A <dfn for=WebRequestEvent>webRequest</dfn>, a {{WebRequest}} instance that
    it is a member of.

<div algorithm>
  The <dfn method for=WebRequestEvent>addListener(|listener|, |filter|,
  |extraInfoSpec|)</dfn> method steps are:

  1. Call {{WebRequestEvent/removeListener}} with |listener|.

  1. Let |eventName| be [=this=]'s [=WebRequestEvent/eventName=].

  1. Let |handlerConfig| be a new [=WebRequest handler config=] with the
      following [=struct/items=]:

      : [=WebRequest handler config/handler=]
      :: |listener|

      : [=WebRequest handler config/filter=]
      :: |filter|

  1. Let |specSet| be a [=set=] containing the items in |extraInfoSpec|.

  1. If |eventName| equals "beforeRequest", then:

      1. If |specSet| is not a [=set/subset=] of the [=set=] « "blocking",
          "requestBody", "extraHeaders" », then [=throw=] a {{TypeError}}.

      1. If |specSet| [=set/contains=] "blocking", then set |handlerConfig|'s
          [=WebRequest handler config/blocking=] to true.

      1. If |specSet| [=set/contains=] "requestBody", then set |handlerConfig|'s
          [=WebRequest handler config/requestsBody=] to true.

      1. If |specSet| [=set/contains=] "extraHeaders", then set |handlerConfig|'s
          [=WebRequest handler config/requestsAllHeaders=] to true.

  1. Otherwise, if |eventName| equals "beforeSendHeaders", then:

      1. If |specSet| is not a [=set/subset=] of the [=set=] « "blocking",
          "requestHeaders", "extraHeaders" », then [=throw=] a {{TypeError}}.

      1. If |specSet| [=set/contains=] "blocking", then set |handlerConfig|'s
          [=WebRequest handler config/blocking=] to true.

      1. If |specSet| [=set/contains=] "requestHeaders", then set |handlerConfig|'s
          [=WebRequest handler config/requestsHeaders=] to true.

      1. If |specSet| [=set/contains=] "extraHeaders", then set |handlerConfig|'s
          [=WebRequest handler config/requestsAllHeaders=] to true.

  1. Otherwise, if |eventName| equals "sendHeaders", then:

      1. If |specSet| is not a [=set/subset=] of the [=set=] « "requestHeaders",
          "extraHeaders" », then [=throw=] a {{TypeError}}.

      1. If |specSet| [=set/contains=] "requestHeaders", then set |handlerConfig|'s
          [=WebRequest handler config/requestsHeaders=] to true.

      1. If |specSet| [=set/contains=] "extraHeaders", then set |handlerConfig|'s
          [=WebRequest handler config/requestsAllHeaders=] to true.

  1. Otherwise, if |eventName| equals "headersReceived", then:

      1. If |specSet| is not a [=set/subset=] of the [=set=] « "blocking",
          "responseHeaders", "extraHeaders" », then [=throw=] a {{TypeError}}.

      1. If |specSet| [=set/contains=] "blocking", then set |handlerConfig|'s
          [=WebRequest handler config/blocking=] to true.

      1. If |specSet| [=set/contains=] "responseHeaders", then set |handlerConfig|'s
          [=WebRequest handler config/requestsHeaders=] to true.

      1. If |specSet| [=set/contains=] "extraHeaders", then set |handlerConfig|'s
          [=WebRequest handler config/requestsAllHeaders=] to true.

  1. Otherwise, if |eventName| equals "authRequired", then:

      1. If |specSet| is not a [=set/subset=] of the [=set=] « "asyncBlocking",
          "blocking", "responseHeaders", "extraHeaders" », then [=throw=]
          a {{TypeError}}.

      1. If |specSet| [=set/contains=] "asyncBlocking", then set |handlerConfig|
          [=WebRequest handler config/asyncBlocking=] to true.

      1. If |specSet| [=set/contains=] "blocking", then set |handlerConfig|'s
          [=WebRequest handler config/blocking=] to true.

      1. If |specSet| [=set/contains=] "responseHeaders", then set |handlerConfig|'s
          [=WebRequest handler config/requestsHeaders=] to true.

      1. If |specSet| [=set/contains=] "extraHeaders", then set |handlerConfig|'s
          [=WebRequest handler config/requestsAllHeaders=] to true.

  1. Otherwise, if |eventName| equals "beforeRedirect", then:

      1. If |specSet| is not a [=set/subset=] of the [=set=] «
          "responseHeaders", "extraHeaders" », then [=throw=] a {{TypeError}}.

      1. If |specSet| [=set/contains=] "responseHeaders", then set |handlerConfig|'s
          [=WebRequest handler config/requestsHeaders=] to true.

      1. If |specSet| [=set/contains=] "extraHeaders", then set |handlerConfig|'s
          [=WebRequest handler config/requestsAllHeaders=] to true.

  1. Otherwise, if |eventName| equals "responseStarted", then:

      1. If |specSet| is not a [=set/subset=] of the [=set=] «
          "responseHeaders", "extraHeaders" », then [=throw=] a {{TypeError}}.

      1. If |specSet| [=set/contains=] "responseHeaders", then set |handlerConfig|'s
          [=WebRequest handler config/requestsHeaders=] to true.

      1. If |specSet| [=set/contains=] "extraHeaders", then set |handlerConfig|'s
          [=WebRequest handler config/requestsAllHeaders=] to true.

  1. Otherwise, if |eventName| equals "completed", then:

      1. If |specSet| is not a [=set/subset=] of the [=set=] «
          "responseHeaders", "extraHeaders" », then [=throw=] a {{TypeError}}.

      1. If |specSet| [=set/contains=] "responseHeaders", then set |handlerConfig|'s
          [=WebRequest handler config/requestsHeaders=] to true.

      1. If |specSet| [=set/contains=] "extraHeaders", then set |handlerConfig|'s
          [=WebRequest handler config/requestsAllHeaders=] to true.

  1. Otherwise, if |eventName| equals "errorOccurred", then:

      1. If |specSet| is not a [=set/subset=] of the [=set=] « "extraHeaders" »,
          then [=throw=] a {{TypeError}}.

      1. If |specSet| [=set/contains=] "extraHeaders", then set |handlerConfig|'s
          [=WebRequest handler config/requestsAllHeaders=] to true.

  1. Otherwise, [=throw=] a {{TypeError}}.

  1. Let |handlerMap| be the [=WebRequest/handler map=] of [=this=]'s
      [=WebRequestEvent/webRequest=].

  1. [=list/Append=] |handlerConfig| to |handlerMap|[|eventName|].

</div>

<div algorithm>
  The <dfn method for=WebRequestEvent>hasListener(|listener|)</dfn>
  method steps are:

  1. Let |handlerMap| be the [=WebRequest/handler map=] of [=this=]'s
      [=WebRequestEvent/webRequest=].

  1. Let |event name| be [=this=]'s [=WebRequestEvent/eventName=].

  1. For each |handlerConfig| in |handlerMap|[|event name|]:

      1. If |handlerConfig|'s [=WebRequest handler config/handler=] equals
          |listener|, return true.

  1. Return false.

</div>

<div algorithm>
  The <dfn method for=WebRequestEvent>hasListeners()</dfn> method steps are:

  1. Let |handlerMap| be the [=WebRequest/handler map=] of [=this=]'s
      [=WebRequestEvent/webRequest=].

  1. Let |event name| be [=this=]'s [=WebRequestEvent/eventName=].

  1. If |handlerMap|[|event name|] is
      [=list/empty=], return false, otherwise return true.

</div>

<div algorithm>
  The <dfn method for=WebRequestEvent>removeListener(|listener|)</dfn>
  method steps are:

  1. Let |handlerMap| be the [=WebRequest/handler map=] of [=this=]'s
      [=WebRequestEvent/webRequest=].

  1. Let |event name| be [=this=]'s [=WebRequestEvent/eventName=].

  1. Let |handlerConfigs| be |handlerMap|[|event name|].

  1. [=list/Remove=] all items from |handlerConfigs| whose
      [=WebRequest handler config/handler=] equals |listener|.

</div>

<div algorithm>
  The <dfn method for=WebRequest>handlerBehaviorChanged(|callback|)</dfn>
  method steps are:

  1. |callback| TODO

</div>

<div algorithm>
  To <dfn>process beforeRequest events</dfn> given a [=request=] |request|,
  run the following steps:

  1. Let |handlers| be the result of calling [=lookup registered WebRequest
      handler configs=] given "beforeRequest", and |request|.

  1. For each |handler| in |handlers|:

      1. Let |details| be the result of calling [=create a
          WebRequestEventDetails object=] given |request|.

      1. If |request|'s [=request/body=] is not null, then:

          1. Let |requestBody| be a new {{RequestBody}}.

          1. Let |body| be |request|'s [=request/body=].

              <span class=XXX>TODO: serialize [=body/stream=] if present.</span>

          1. Switch on |body|'s [=body/source=]:

              : [=byte sequence=]
              :: [=list/Append=] a new {{UploadData}} with {{UploadData/bytes}}
                  equal to the serialized |body|'s [=body/source=] to
                  |requestBody|'s {{RequestBody/raw}}.

              : {{Blob}}
              :: [=list/Append=] a new {{UploadData}} with {{UploadData/bytes}}
                  equal to the serialized |body|'s [=body/source=] to
                  |requestBody|'s {{RequestBody/raw}}.

              : {{FormData}}
              ::  1. Let |formData| be a new {{/object}}.

                  1. [=list/For each=] |entry| in |body|'s [=body/source=]'s
                      [=FormData/entry list=]:

                      1. Switch on |entry|[1]:

                      : {{File}}
                      :: [=list/Append=] a new {{UploadData}} with
                          {{UploadData/file}} equal to |entry|[1]'s
                          {{File/name}} to |requestBody|'s
                          {{RequestBody/raw}}.

                      : {{USVString}}
                      ::  1. If |formData|[|entry|[0]] does not exist, then
                              set |formData|[|entry|[0]] equal to an empty
                              [=list=].

                          1. [=list/Append=] |entry|[1] to
                              |formData|[|entry|[0]].


                  1. Set |details|'s {{RequestBody/formData}} to |formData|.

          1. Set |details|'s {{WebRequestBeforeRequestDetails/requestBody}}
              to |requestBody|.

      1. If |handler|'s [=WebRequest handler config/blocking=] flag is true,
          then:

          1. Let |result| be the result of calling |handler|[[=WebRequest
              handler config/handler=]] given |details|.

          1. If any [=map/key=] in |result| is not [=list/contained=] in the set
              « "cancel", "redirect" », then [=throw=] a {{TypeError}}.

          1. Return |result|.

      1. Call |handler|[[=WebRequest handler config/handler=]] given |details|
          [=in parallel=].

      1. Return null.

</div>

<div algorithm>
  To <dfn>create a {{WebRequestEventDetails}} object</dfn> given a [=request=]
  |request|, run the following steps:

  1. Let |environmentSettingsObject| be |request|'s [=request/client=].

  1. Let |crossOriginIsolatedCapability| be |environmentSettingsObject|'s
      [=environment settings object/cross-origin isolated capability=], or
      false if |environmentSettingsObject| is null.

  1. Let |details| be a new {{WebRequestEventDetails}} with the following
      fields:
      : {{WebRequestEventDetails/timeStamp}}
      :: The [=coarsened shared current time=] given
          |crossOriginIsolatedCapability|.

      : {{WebRequestEventDetails/url}}
      :: The last element of |request|'s [=request/URL list=].

      : {{WebRequestEventDetails/method}}
      :: |request|'s [=request/method=].

      : {{WebRequestEventDetails/initiator}}
      :: The [=serialization of an origin=] given |request|'s [=request/origin=].

         Note: An opaque origin will result in {{WebRequestEventDetails/initiator}}
         being set to the [=string=] "null".

      : {{WebRequestEventDetails/type}}
      :: The result of calling [=get a request's ResourceType=] given |request|.

      : {{WebRequestEventDetails/requestId}}
      :: |request|'s [=request/requestId=].

      : {{WebRequestEventDetails/frameId}}
      :: -1

      : {{WebRequestEventDetails/parentFrameId}}
      :: -1

  1. If |environmentSettingsObject|'s [=environment settings object/global object=]
      is a {{Window}} object, then:

      1. Let |window| be |environmentSettingsObject|'s
          [=environment settings object/global object=].

      1. Update the following fields of |details|:

          : {{WebRequestEventDetails/documentId}}
          :: |environmentSettingsObject|'s [=environment/id=].

          : {{WebRequestEventDetails/documentLifecycle}}
          :: <span class=XXX>It's unclear if {{DocumentLifecycle}} values map
              to existing concepts.</span>

          : {{WebRequestEventDetails/frameId}}
          :: The [=navigable/frameId=] of |window|'s [=window/navigable=].

          : {{WebRequestEventDetails/frameType}}
          :: {{FrameType/"fenced_frame"}} if |window|'s {{Window/fence}} is
              non-null, {{FrameType/"outermost_frame"}} if |window|'s
              {{Window/top}} equals |window|, {{FrameType/"sub_frame"}}
              otherwise.

          1. If |window|'s {{Window/parent}} is not equal to |window|, then
              update the following values of |details|:

              : {{WebRequestEventDetails/parentDocumentId}}
              :: The [=environment/id=] of |window|'s {{Window/parent}}'s
                  [=active document=]'s [=relevant global object=].

              : {{WebRequestEventDetails/parentFrameId}}
              :: The [=navigable/frameId=] of |window|'s {{Window/parent}}'s
                  [=window/navigable=].

  1. Return |details|.

</div>

<!--
<div algorithm>
  To <dfn>create a {{WebRequestResponseEventDetails}} object</dfn> given a
  [=request=] |request|, a [=response=] |response|, a [=boolean=]
  |requestsHeaders|, and a [=boolean=] |requestsAllHeaders|,
  run the following steps:

  1. Let |details| be the result of [=creating a WebRequestEventDetails object=]
      given |request|.

  1. Update the following fields in |details|:

      : {{WebRequestResponseEventDetails/statusCode}}
      :: |response|'s [=response/status=].

      : {{WebRequestResponseEventDetails/statusLine}}
      :: |response|'s [=response/status message=].

  1. If |requestsHeaders| is true, then set |details|'s
      {{WebRequestResponseEventDetails/responseHeaders}} to the result of
      calling [=convert a header list to an HttpHeader sequence=] given
      |response|'s [=response/header list=], and |requestsAllHeaders|.

  1. Return |details|.

</div>

<div algorithm>
  To <dfn>create a {{WebRequestResponseWithIpEventDetails}} object</dfn> given a
  [=request=] |request|, a [=response=] |response|,
  a [=boolean=] |requestsHeaders|, and a [=boolean=] |requestsAllHeaders|,
  run the following steps:

  1. Let |details| be the result of [=creating a
      WebRequestResponseEventDetails object=] given |request|, |response|,
      |requestsHeaders|, and |requestsAllHeaders|.

  1. If |response|'s [=response/cache state=] is "local", then set |details|'s
      {{WebRequestResponseWithIpEventDetails/fromCache}} to true.

  1. Set |details|'s {{WebRequestResponseWithIpEventDetails/ip}} to the
      [=ip address=] from which |response| was received if the request
      involved a network request.

      <span class=XXX>The [[FETCH]] spec currently doesn't specify storing
      the remote IP address used when sending |request|.</span>

  1. Return |details|.

</div>

<div algorithm>
  To <dfn>convert a [=header list=] to an {{HttpHeader}} sequence</dfn> given
  a [=header list=] |fetch headers|, and a [=boolean=] |requestsAllHeaders|,
  run the following steps:

  1. Let |headers| be a an empty list of {{HttpHeader}} objects.

  1. For each |fetch header| in |fetch headers|:

      1. Let |header| be a new {{HttpHeader}}.

          <span class=XXX>TODO: Skip |fetch header| if |requestsAllHeaders|
          is false and |fetch header|[0] doesn't meet some criteria. Define
          this criteria.</span>

      1. Set |header|["{{HttpHeader/name}}"] to the [=isomorphic decoding=] of
          |fetch header|[0].

      1. Let |value| be the [=isomorphic decoding=] of |fetch header|[1] .

      1. If |value| is a [=scalar value string=], then set |header|
          ["{{HttpHeader/value}}"] to |value|.

      1. Otherwise, set |header|["{{HttpHeader/binaryValue}}"] to
          |fetch header|[1].

      1. [=list/Append=] |header| to |headers|.

  1. Return |headers|.

</div>
-->

<div algorithm>
  To <dfn>get a request's {{ResourceType}}</dfn> given a [=request=]
  |request|, run the following steps:

  1. Return |request|'s [=request/initiator type=].

      <p class=XXX>TODO: [=request/initiator type=] doesn't exactly map to
      {{ResourceType}}. Define this mapping.</p>

</div>

<div algorithm>
  To <dfn>create a redirect response</dfn> given a [=string=] |redirectUrl|,
  return a [=response=] with the following fields:

  : [=response/status=]
  :: 301

  : [=response/header list=]
  :: « ("Location", |redirectUrl|) »

</div>

## WebRequest handler config ## {#webrequest-handler-config-struct}

  A <dfn export>WebRequest handler config</dfn> is a [=struct=] with the
  following [=struct/items=]:

  <dl export dfn-for="WebRequest handler config">
    : <dfn>handler</dfn>
    :: a {{WebRequestEventListener}}

    : <dfn>filter</dfn>
    :: a {{RequestFilter}}

    : <dfn>requestsBody</dfn>
    :: a [=boolean=]

    : <dfn>requestsHeaders</dfn>
    :: a [=boolean=]

    : <dfn>requestsAllHeaders</dfn>
    :: a [=boolean=]

    : <dfn>blocking</dfn>
    :: a [=boolean=]

    : <dfn>asyncBlocking</dfn>
    :: a [=boolean=]
  </dl>

  <div algorithm>
    A [=string=] |url| <dfn>matches a URL pattern</dfn> [=string=] |url pattern|
    if the following steps return true:

    1. |url| |url pattern| <span class=XXX>TODO: Spec this, ideally referring to
        a not-yet-defined <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Match_patterns">
        Match pattern</a> spec.</span>
  </div>

  <div algorithm>
    To <dfn>lookup registered WebRequest handler configs</dfn> given a
    [=string=] |event name|, and a [=request=] |request|, run the
    following steps:

    1. Let |client| be |request|'s [=request/client=].

    1. If |client| is null, return an empty [=list=].

    1. Let |controlled frame| be the {{HTMLControlledFrameElement}} |client|
        is embedded within, or null.

        <span class=XXX>The ESO to CF mapping needs to be formalized.</span>

    1. If |controlled frame| is null, return an empty [=list=].

    1. Let |valid handlers| be an empty [=list=].

    1. Let |handlerMap| be |controlled frame|'s
        {{HTMLControlledFrameElement/request}}'s [=WebRequest/handler map=].

    1. For each |handlerConfig| in |handlerMap|[|event name|]:

        1. Let |filter| be |handlerConfig|'s [=WebRequest handler config/filter=]

        1. Let |types| be |filter|[{{RequestFilter/types}}].

        1. If |types| is not [=list/empty=] and |types| does not
            [=list/contain=] the result of calling [=get a request's ResourceType=]
            given |request|, then [=iteration/continue=].

        1. Let |urls| be |filter|[{{RequestFilter/urls}}].

        1. Let |is valid url| be true if |urls| is [=list/empty=],
            false otherwise.

        1. For each |url pattern| in |urls|:

            1. If |request|'s [=request/URL=] [=matches a URL pattern=] given
                |url pattern|, set |is valid url| to true.

        1. [=list/Append=] |handlerConfig| to |valid handlers|.

    1. Return |valid handlers|.

  </div>

## Monkey Patches ## {#api-web-request-monkey}

### Fetch ### {#api-web-request-monkey-fetch}

A [=request=] has an associated <dfn for=request>requestId</dfn>, which is an
opaque string, randomly assigned at the request's creation.

Open questions:
 1. How does WR interact with HSTS? When is the https upgrade applied?
    If HSTS is pre-onbeforerequest then we need to move the event later
 1. How does WR interact with preload?
 1. Does WR intercept worker scripts or requests from workers?

The [=main fetch=] algorithm is monkeypatched as follows:

  1. Let |request| be fetchParam's request.

  2. Let |response| be null.

  3. <ins>Let |webRequestResult| be the result of calling [=process
      beforeRequest events=] given |request|.</ins>

  4. <ins>If |webRequestResult| is not null, then:</ins>

      1. <ins>If |webRequestResult|["{{BlockingResponse/cancel}}"] is true,
          then set |response| to a [=network error=].</ins>

      1. <ins>Otherwise, if |webRequestResult|
          ["{{BlockingResponse/redirectUrl}}"] is not an empty [=string=], then
          set |response| to the result of [=creating a redirect response=]
          given |webRequestResult|["{{BlockingResponse/redirectUrl}}"].</ins>

<!-- ====================================================================== -->
# Context Menus API # {#api-context-menus}
<!-- ====================================================================== -->

<xmp class="idl">
enum ContextType {
    "all",
    "page",
    "frame",
    "selection",
    "link",
    "editable",
    "image",
    "video",
    "audio",
};

enum ItemType {
    "normal",
    "checkbox",
    "radio",
    "separator",
};

dictionary OnClickData {
    boolean checked;
    required boolean editable;
    long frameId;
    USVString frameUrl;
    USVString linkUrl;
    DOMString mediaType;
    required (DOMString or long) menuItemId;
    USVString pageUrl;
    (DOMString or long) parentMenuId;
    DOMString selectionText;
    USVString srcUrl;
    boolean wasChecked;
};

callback ContextMenusEventListener = undefined (OnClickData data);

dictionary ContextMenusProperties {
    boolean checked;
    sequence<ContextType> context;
    DOMString documentUrlPatterns;
    boolean enabled;
    DOMString parentId;
    DOMString targetUrlPatterns;
    DOMString title;
    ItemType type;
    ContextMenusEventListener onclick;
};

dictionary ContextMenusCreateProperties : ContextMenusProperties {
    DOMString id;
};

callback ContextMenusCallback = undefined ();

[Exposed=Window, IsolatedContext]
interface ContextMenus {
    // TODO: Define the `onShow` property.

    // Returns the ID of the newly created menu item.
    (DOMString or long) create(
        ContextMenusCreateProperties properties,
        ContextMenusCallback? callback);

    undefined remove(
        (DOMString or long) menuItemId,
        ContextMenusCallback? callback);
    undefined removeAll(ContextMenusCallback? callback);
    undefined update(
        (DOMString or long) id,
        ContextMenusProperties properties,
        ContextMenusCallback? callback);
};
</xmp>

<!-- ====================================================================== -->
# Usage Overview # {#usage-overview}
<!-- ====================================================================== -->

Lorem ipsum. Insert basic info and example here.

<!-- ====================================================================== -->
# Motivating Applications # {#motivating-applications}
<!-- ====================================================================== -->

*This section is non-normative.*

<!-- ====================================================================== -->
## Latency-sensitive applications in virtualized sessions ## {#browser-content-redirection}
<!-- ====================================================================== -->

In virtualized environments, users typically have a local thin client that
renders a full virtual desktop. The actual desktop execution environment will be
running on a remote virtualization server. If the user's browser navigates to a
latency-sensitive application (such as a video app), the rendered content will
have additional latency ("lag") that makes the experience difficult or
impossible for the user. This also applies for applications that record the
user, such as video conferencing applications. In these latency-sensitive
applications, the virtual desktop application can render the latency-sensitive
content locally and overlay it on top of the rendered remote content to reduce
this latency. This use case is also known as "browser content redirection."

<!-- ====================================================================== -->
## Embedding third party web content without restriction ## {#no-embedding-prohibitions}
<!-- ====================================================================== -->

In a kiosk environment, applications must load content from third parties and
display that content on screens within their applications. A teacher may trigger
the navigation event, or it may be configured by an administrator such as a
shopping mall manager. The content may prohibit embedding by <{iframe}> through
the use of X-Frame-Options and CSP. An controlled frame, however, should be able
to load all content, even content that prohibits embedding by <{iframe}>.

<!-- ====================================================================== -->
## Remote display and manipulation of web content ## {#remote-content-control}
<!-- ====================================================================== -->

In a kiosk environment, applications must ensure that content continues to
display on screens and may need to interrupt content with their own supplied
behaviors. This behavior should work without local attendance by an
administrator, and ideally can be managed remotely over the network. If content
were to crash, for example, these applications should observe and respond to the
crash by reloading the content in a fresh embedded view.

<!-- ====================================================================== -->
## Clearing user content after each session ## {#clearing-session-data}
<!-- ====================================================================== -->

In some environments, someone only uses a single device for a brief time to
complete their task, like ordering in a restaurant. When their task is complete,
the embedder application should be able to clear all of the local user data
associated with the task and then restart the embedded instance.

<!-- ====================================================================== -->
## Monitor for idle sessions ## {#monitor-idle-sessions}
<!-- ====================================================================== -->

While users interact with embedded content, the user may not explicitly end
their session. This content may assume the user is present when they have
actually finished or departed without completing the task. Embedder applications
want to detect when users idle over their case's threshold and begin a fresh
session.

<!-- ====================================================================== -->
## Arbitrarily blocking navigations ## {#blocking-navigations}
<!-- ====================================================================== -->

While displaying embedded web content that's not authored by the embedder, pages
may link to third party web content that's disallowed. Allowing the embedder to
edit elements in embedded content through arbitrary script injection into the
web content can ensure navigation cannot occur to blocked pages. The embedder
can also use the Controlled Frame API to capture navigation events and ensure
that only pages to approved sites can be loaded within that controlled frame.

<!-- ====================================================================== -->
# Security, Privacy, and Accessibility Considerations # {#considerations}
<!-- ====================================================================== -->

*This section is non-normative.*

<!-- ====================================================================== -->
## Security ## {#security}
<!-- ====================================================================== -->

<b>Controlled Frame is based upon [[Isolated-Web-Apps]] (IWA)
and integrates with core security specs</b>

Since Controlled Frame is a particularly powerful API, using it or even having
it available makes an app a target of various types of hacking. As a result,
this API is limited to use in [[Isolated-Web-Apps|IWA]] which have additional
safeguards in place to protect application developers and users. The Isolated
Web App explainer has this to say:

> <i>"A user agent may also force an application to adopt this threat model if
the developer needs access to APIs which would make the application an appealing
target for XSS or server-side attacks."</i>

Controlled Frame makes just such an appealing target, and to expose this with
caution we're opting into [[Isolated-Web-Apps|IWA]] to guard against certain
attacks. Generally, [[Isolated-Web-Apps|IWAs]] provide strong security
assurances that each of the resources in an application are secure both at rest
and in-transit. You can read more about [[Isolated-Web-Apps|IWAs]] security and
permissions in the [[Isolated-Web-Apps|IWA]] explainer and the
[[Isolated-Web-Apps|IWAs]] [[High-Watermark-Permissions]] explainer.

Controlled Frame integrates with [[!Permissions-Policy]] and [[!Permissions]].
You can read more about [[Permissions-Policy#privacy]] and
[[Permissions#security-considerations]] (note the entry is currently sparse).

<b>Attacking web sites could display content that doesn't otherwise allow itself
to be embedded and trick users on non-[[Isolated-Web-Apps|IWAs]].</b>

Planned mitigation:

-  Controlled Frame will only be available within [[Isolated-Web-Apps|IWAs]]

<b>An [[Isolated-Web-Apps|IWA]] may embed another [[Isolated-Web-Apps|IWA]] (or
itself) via Controlled Frame to manipulate our [[Isolated-Web-Apps|IWA]]
policies somehow (e.g. an Controlled Frame embedded [[Isolated-Web-Apps|IWA]]
may detect it's being embedded due to the absence of the "controlled-frame"
policy-controlled feature).</b>

Planned mitigation:

-  Controlled Frame can only point to "https" schemes, excluding the
    "isolated-app" scheme used for [[Isolated-Web-Apps|IWAs]]

<b>Controlled Frame could gain access to the powerful &lt;controlledframe&gt;
element.</b>

An [[Isolated-Web-Apps|IWA]] that's not expected to use Controlled Frame may
attempt to embed content.

Planned mitigation:

-  [[Isolated-Web-Apps|IWA]] APIs can never be delegated to cross-origin, so it
    will not be possible for any nested top-level navigable to access an
    [[Isolated-Web-Apps|IWA]].
-  Secondly, only embedder applications and their same-origin [[Isolated-Web-Apps|IWA]]
    child navigables that have been granted the "controlled-frame"
    policy-controlled feature will have the Controlled Frame element available.
-  Same-origin child navigables without the "controlled-frame"
    policy-controlled feature will not be provided a Controlled Frame element.
    Their inner same-origin nested navigables will always not have it available.

<b>An IWA may attempt to embed content from non-https schemes, such as 'http:'
or 'isolated-app:'</b>

Planned mitigation:

-  Controlled Frame will only work when the navigable's "src" URL has an
    'https:' scheme

<b>Malicious Controlled Frame could access the embedder's running process (eg.
Spectre attack)</b>

Planned mitigation:

-  Controlled Frame will be executed in a separate process from the
    embedder's process

<b>Controlled Frame for a given "https origin" could interact or interfere with
the user's own storage data for that https origin</b>

Planned mitigation:

-  We're adding a Partition concept. Every Partition is a tuple of
    StorageKey and a separate object key.
-  Let there be a default partition with key=0 that stores
    "non-[[Isolated-Web-Apps|IWA]]" window
    and tab usage.
-  Controlled Frame will always store data in a certain StorageKey which is
    apart from the default partition.
-  Data written to by a given "https origin" while the user accesses that
    origin via an [[Isolated-Web-Apps|IWA]] Controlled Frame will be isolated
    from the default partition.
-  All usage will be separated between [[Isolated-Web-Apps|IWA]] and each
    partition will be fully isolated from each other and from default
    usage outside of [[Isolated-Web-Apps|IWA]].

<b>Malicious Controlled Frame could overwrite embedder's stored data</b>

-  The embedder and embedded storage user agent could overlap, and possibly
    multiple same-site [[Isolated-Web-Apps|IWA]] child navigables could be
    affected by activity in the Controlled Frame
-  if storage user agents were shared between the embedder and embedded
    sites, clearing data for either one could negatively impact the other

Planned mitigation:

-  [[Isolated-Web-Apps|IWA]] and Controlled Frame will always have separate
    storage user agents
-  A Controlled Frame should not have read or write access to other storage
    user agents besides its own

<b>Malicious Controlled Frame may detect it is embedded and attempt to attack
the embedder application</b>

Planned mitigation:

-  The user agent will match the browser.
-  The Controlled Frame storage user agent will be separate from the
    [[Isolated-Web-Apps|IWA]] and the default storage user agents.
-  The Controlled Frame process will be separate from the
    [[Isolated-Web-Apps|IWA]] and the default renderer and browser processes.
-  The Controlled Frame environment will appear to be the top-most navigable:
    -  window should match window.parent and window.top
    -  List of policy-controlled features and their disable/enable status
        should match the default for a navigable

Ideas:

-  Investigate for potential interactions around filesystem, quota storage,
    and localStorage APIs

<b>User may not be able to verify the origin of the page being viewed in the
Controlled Frame</b>

Ideas:

-  Expose the origin to the user somehow, such as adding UI at the top of a
    Controlled Frame that displays the origin?
-  Have the [[Isolated-Web-Apps|IWA]] specify in the manifest the origins that
    they expect to access?

<b>Controlled Frame may exploit vulnerabilities in out-of-date browser
engine</b>

Already addressed with:

-  Existing browser engine auto-update mechanisms

<!-- ====================================================================== -->
## Privacy ## {#privacy}
<!-- ====================================================================== -->

Controlled Frame integrates with Permissions Policy and Permissions. You can
read more about [[Permissions-Policy#privacy]].  You can read more about
[[Permissions#security-considerations]].

For Controlled Frame specifically, we've identified the following privacy
considerations:

-  Users' browsing within Controlled Frame will be visible to the
    [[Isolated-Web-Apps|IWA]]
-  [[Isolated-Web-Apps|IWAs]] can access and exfiltrate the Controlled Frame's
    session cookies (this only applies to the Controlled Frame's session since
    they use a separate storage partition from the [[Isolated-Web-Apps|IWA]] and
    the third party origin when browsed in a tab)
-  User activity in Controlled Frame can be observed by the
    [[Isolated-Web-Apps|IWA]] (e.g. keyboard events can be monitored, password
    entry can be sniffed)
-  User file upload to Controlled Frame can be hijacked
-  User data held in the Controlled Frame's remote server could be accessed by
    code implanted by the [[Isolated-Web-Apps|IWA]]
-  Users that wish to clear their session history must also do so via the
    [[Isolated-Web-Apps|IWA]], which will then need to clear the associated
    storage user agents
    -  This would be necessary since embedded storage user agents are separate
        from the non-embedded storage user agents for any given https origin
-  We plan to investigate browser UX to allow users to clear the Controlled
    Frame storage user agents, the following cases will be considered:
    -  If a user wants to clear site data for an [[Isolated-Web-Apps|IWA]], the
        associated embedded storage user agents will also be cleared
        -  This is because if the [[Isolated-Web-Apps|IWA]]'s data is cleared,
            the app will no longer have any context for the associated embedded
            storage user agents and therefore will no longer be used or useful
            to the user or organization
        -  As a result, we expect that clearing an [[Isolated-Web-Apps|IWA]]'s
            site data will require clearing all of the associated embedded
            storage user agents
    -  A user may want to clear all site data for a given "https origin", even
        if that origin is stored within an [[Isolated-Web-Apps|IWA]]'s embedded
        storage user agent
        -  We may choose to provide the ability to clear all
            [[Isolated-Web-Apps|IWA]] site data for that "https origin" even if
            that site data is held within an embedded storage user agent
        -  If we chose to clear the "https origin" data,
            [[Isolated-Web-Apps|IWAs]] would need to prepare for the possibility
            that embedded storage user agents may be removed outside of their
            control, and this may be disruptive to the [[Isolated-Web-Apps|IWA]]
            and introduce complexity of implementation
        -  Supporting this in the browser user agent exposes browser vendors,
            developers, and users to additional complexity, so we may choose not
            to support this approach and instead leave this up to
            [[Isolated-Web-Apps|IWA]] developers to implement
        -  As a counter example to supporting clearing a single given "https
            origin"'s embedded storage user agent, consider that to our
            knowledge no operating system behaves that way
            -  i.e. there's no central "clear browsing data" option which clears
                storage for all installed browser engines, each application's
                storage is treated as its own to manage
    -  User wants to clear the site data for a given [[Isolated-Web-Apps|IWA]]'s
        Controlled Frame-embedded storage user agent for a given "https origin"
    -  User wants to clear the site data for a given [[Isolated-Web-Apps|IWA]]'s
        Controlled Frame-embedded storage user agents for all "https origins"
-  An [[Isolated-Web-Apps|IWA]] will need the ability to clear the storage user
    agent's Controlled Frame-embedded storage user agent for a given "https
    origin"

<!-- ====================================================================== -->
## Accessibility ## {#accessibility}
<!-- ====================================================================== -->

For Controlled Frame, we've identified the following accessibility
considerations:

-  Browser user agents' accessibility tools and APIs should have visibility into
    Controlled Frame
-  [[Isolated-Web-Apps|IWAs]] should expect to provide their own accessibility
    tools for Controlled Frame content in order to properly integrate
    accessibility features for some use cases (such as "browser content
    redirection")

# Acknowledgements # {#acknowledgements}

The following people contributed to the development of this document.

* <a href="https://github.com/odejesush">Ovidio Ruiz-Henríquez</a>
